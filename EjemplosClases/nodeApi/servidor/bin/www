#!/usr/bin/env node

/**
 * Module dependencies.
 * ******** AQUÍ ES DONDE REQUERIMOS NUESTRA APLICACIÓN, NUESTRA 'APP'Y ARARANCARLA POR EL PUERTO QUE LE DIGAMOS O ENCUENTRE ********
 */

var app = require('../app');
var debug = require('debug')('servidor:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

    // Buscamos la variable de entorno llamada PORT o en su defecto el puerto 3000
var port = normalizePort(process.env.PORT || '3000');

// le decimos a 'app' que utilice 'port' para la conexión
// podemos cambiar esta variable de entorno desde consola con
// DEBUG=servidor:* PORT=4000 nodemon ./bin/www, o en el puerto que le digamos.
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    // 'debug', escribe en consola cuando estamos en modo debug para hacer log en consola.
    // cuando en consola escriba "DEBUG=servidor:server NODE_ENV=production nodemon ./bin/www"
    // voy a a establecer que la variable de entorno 'NODE_ENV' sea igual a cuando trabajo en producción
    // ('production'), ya que por defecto NODE arranca en modo desarrollo ('development'); con esto consigo
    // añadir los archivos que me interesen, bien a la rama de desarrollo o a la rama de producción.
    // con 'app.get('env') obtengo lo que le pase a la variable de entorno 'NODE_ENV' por consola para establecer esa rama.
    // Podemos comprobarlo en 'app.js' como lo establece por defecto --> "app.use(logger('dev'));"
    // Para los errores y su debug por consola tambieén podemos ver como lo establece en 'app.js'--> "if (app.get('env') === 'development')"
    // con esto evitamos que al definir nuestro entorno en producción al intentar acceder un malintencionado a través de la web, evitar
    // darle la traza, cosa que en development si nos puede interesar ya que trabajamos nosotros y no tienen acceso otros.
    debug('Listening on ' + bind + ' entorno: ' + app.get('env'));
}



